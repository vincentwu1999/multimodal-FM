"""
Synthetic chest X‑ray embedding loader and preprocessing.

This module simulates loading precomputed chest‑X‑ray embeddings and
provides a normalisation function.  The code originates from the
original `multimodal_fusion_complete-real_data.py` script.
"""

from __future__ import annotations

from typing import Tuple  # noqa: F401

import numpy as np
import torch


def load_chestx_subset(num_samples: int, num_classes: int) -> Tuple[np.ndarray, np.ndarray]:
    """Load a subset of precomputed chest‑X‑ray embeddings.

    Args:
        num_samples: number of samples to load.
        num_classes: number of classes for synthetic labels.

    Returns:
        embeddings: array of shape (num_samples, 512) representing BiomedCLIP embeddings.
        labels: array of integers indicating classes.

    In a real implementation, this would read embeddings
    generated by BiomedCLIP or a similar model from disk.
    """
    embeddings = np.random.randn(num_samples, 512).astype(np.float32)
    labels = np.random.randint(0, num_classes, size=(num_samples,), dtype=np.int64)
    return embeddings, labels


def preprocess_image_embeddings(embeddings: np.ndarray, device: torch.device | str = "cpu") -> torch.Tensor:
    """Normalise image embeddings and convert to tensor."""
    emb_norm = (embeddings - embeddings.mean(axis=1, keepdims=True)) / (
        embeddings.std(axis=1, keepdims=True) + 1e-6
    )
    return torch.tensor(emb_norm, dtype=torch.float32, device=device)


__all__ = ["load_chestx_subset", "preprocess_image_embeddings"]
